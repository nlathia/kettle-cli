// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package templates generated by go-bindata.// sources:
// templates/gcloud/cloud_function/Makefile
// templates/gcloud/cloud_function/README.md
// templates/gcloud/cloud_function/bin/_config.sh
// templates/gcloud/cloud_function/bin/cleanup.sh
// templates/gcloud/cloud_function/bin/launch.sh
// templates/gcloud/cloud_function/bin/remove_pyenv.sh
// templates/gcloud/cloud_function/bin/setup_pyenv.sh
// templates/gcloud/cloud_function/main.py
// templates/gcloud/cloud_function/model/__init__.py
// templates/gcloud/cloud_function/model/artifacts/README.md
// templates/gcloud/cloud_function/model/artifacts/__init__.py
// templates/gcloud/cloud_function/model/artifacts/files.py
// templates/gcloud/cloud_function/model/predict.py
// templates/gcloud/cloud_function/requirements-dev.txt
// templates/gcloud/cloud_function/requirements.txt
// templates/gcloud/cloud_run/Dockerfile
// templates/gcloud/cloud_run/Makefile
// templates/gcloud/cloud_run/README.md
// templates/gcloud/cloud_run/bin/_config.sh
// templates/gcloud/cloud_run/bin/cleanup.sh
// templates/gcloud/cloud_run/bin/remove_pyenv.sh
// templates/gcloud/cloud_run/bin/setup_pyenv.sh
// templates/gcloud/cloud_run/main.py
// templates/gcloud/cloud_run/model/predict.py
// templates/gcloud/cloud_run/requirements-dev.txt
// templates/gcloud/cloud_run/requirements.txt
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesGcloudCloud_functionMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x4d\x4b\x86\x40\x14\x85\xd7\xdd\x5f\x71\x17\x2f\xbc\xba\x50\x69\x2b\x04\xb9\x10\x0a\xca\x22\x4a\x68\x25\xd3\x78\x63\x84\xdb\x38\x38\x1f\x21\xf8\xe3\x63\x14\x15\xda\xdd\x39\xe7\xe1\x3c\xd3\x3e\xbe\xbd\x7f\x54\x4f\x75\xd3\x76\x4d\xf5\x5c\xdf\x5d\x12\xab\x88\x19\xcd\x6f\x8f\x0b\x4e\x14\x70\x41\xe9\x1d\x66\x3d\x5e\x8b\x2b\x66\xdf\x78\xbb\xe5\x69\xd6\x53\x00\xc8\x5f\x1f\x5e\x9a\xcf\x12\x07\x6d\x9d\x60\x46\xaf\xf7\xcb\x91\x75\x28\x99\x84\x06\x38\xd2\x12\x6e\xee\xf3\xe2\x6b\xd0\xc5\x44\x3f\x63\xa0\xce\xcc\xa4\x43\x6e\x15\xc0\x4e\x9c\x13\x07\x6b\xc9\x79\x73\xa0\x78\x49\xfe\xfd\x3a\x05\x88\xb6\x38\x6e\xe6\x78\x01\xac\xe2\xd3\xb6\x3e\xbd\x59\x45\x3c\x4a\xc1\x6a\xdc\xf8\xad\x66\xe1\xb5\x54\xb1\xfd\x0b\x00\x00\xff\xff\xf4\x0e\xc4\x98\x10\x01\x00\x00")

func templatesGcloudCloud_functionMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionMakefile,
		"templates/gcloud/cloud_function/Makefile",
	)
}

func templatesGcloudCloud_functionMakefile() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/Makefile", size: 272, mode: os.FileMode(420), modTime: time.Unix(1602339670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8a\x31\x0b\xc2\x30\x10\x46\xf7\xfc\x8a\x4f\x5c\x74\x69\x77\x37\xd1\x45\x10\x27\x37\x71\x88\xc9\xd5\x1c\xd8\x5e\xb8\x5c\x28\xa5\xf4\xbf\x8b\x83\xdd\xde\x7b\xbc\x2d\xe6\x19\xcd\x99\x95\x82\x89\x4e\x37\xdf\x13\x96\xc5\xb9\x63\x8c\xf0\x88\x54\x82\x72\x36\x96\x01\xd2\x61\x92\xaa\x08\x1f\xa9\x11\x5d\x1d\xc2\x2f\x6f\x9c\xbb\x27\x2e\xab\x63\xf4\x05\x41\xc9\x1b\x45\x8c\x6c\x09\x96\x08\x0f\xc9\xa4\xde\x44\x71\xba\x5e\x9e\xbb\x64\x96\xcb\xa1\x6d\xdf\x6c\xa9\xbe\x9a\x20\x7d\xfb\x1f\x3c\xaf\xb8\x6f\xdc\x37\x00\x00\xff\xff\xdc\x57\xc0\xe5\x9e\x00\x00\x00")

func templatesGcloudCloud_functionReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionReadmeMd,
		"templates/gcloud/cloud_function/README.md",
	)
}

func templatesGcloudCloud_functionReadmeMd() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/README.md", size: 158, mode: os.FileMode(420), modTime: time.Unix(1602336547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionBin_configSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\xc8\x2f\x2a\x51\x08\x88\x0c\xf1\xf0\xf7\x8b\x0f\x73\x0d\x0a\xf6\xf4\xf7\xb3\x35\xd6\x33\xd7\x33\xe0\xe2\x82\x4a\x86\x79\x06\x85\x84\x3a\xfa\xb8\xfa\x85\xc5\xfb\x39\xfa\xba\xda\xaa\x68\x14\x54\xa6\xe6\x95\x29\xe4\xe4\x27\x27\xe6\x68\x2a\xd4\xd4\x28\x28\x29\xc1\xd4\x06\xb9\x06\xf8\xc7\x07\xf9\xfb\x87\xd8\xaa\x68\x24\xa7\x28\xa8\x68\xa4\x64\x16\xe5\x25\xe6\xa6\x2a\xa8\x18\x68\xea\xeb\xe9\x29\xa8\xa9\x29\x14\x94\xa7\x68\x72\x01\x02\x00\x00\xff\xff\x02\x1a\x65\xd0\x78\x00\x00\x00")

func templatesGcloudCloud_functionBin_configShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionBin_configSh,
		"templates/gcloud/cloud_function/bin/_config.sh",
	)
}

func templatesGcloudCloud_functionBin_configSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionBin_configShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/bin/_config.sh", size: 120, mode: os.FileMode(493), modTime: time.Unix(1602335830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionBinCleanupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x31\x4e\x03\x31\x10\x05\xd0\xde\xa7\xf8\x72\x28\xa0\x88\x0f\x40\x0d\x74\x74\x94\x91\x36\xd6\x78\xbc\x6b\x65\x3d\xb3\x1a\x1b\xc4\x4a\xdb\x52\x73\x01\x2e\xc1\x95\x38\x09\x4a\xa0\x80\x66\xa4\xf9\xfa\x7a\x7f\x87\xc7\x78\xe2\x5c\x66\x06\x69\xad\x51\xd2\x2d\x8e\x35\x9e\x18\x34\x73\x94\x23\xdc\x0e\x4f\x53\x69\x68\x64\x65\xe9\x30\xae\xfa\xc2\x0d\x71\x9e\xa1\x19\x7d\x62\x2c\x2b\x45\x9a\x18\x67\xa4\x21\x9b\xd6\x4b\x4c\xcf\x66\x2c\x1d\xa9\x18\x53\x57\x5b\x9d\x63\x9a\x14\xfe\x20\xf8\x7a\xff\x04\x1e\x8a\xa4\x22\x23\xa2\xa4\x1f\xf6\xfc\xfc\xc3\x42\x08\xde\xb9\x5c\x24\x21\x60\xc3\x68\xbc\x60\x7f\x0f\x7f\x3d\x0c\xbf\xbd\x61\xd8\x0e\x61\x59\xe9\x72\xf5\xea\xc6\x63\xc3\x6b\xb4\xb1\xc1\x2a\xf6\x96\xff\x6e\x7e\xbc\x01\x77\x2a\x1c\xfc\x77\x00\x00\x00\xff\xff\x51\xbf\xac\xf4\xf5\x00\x00\x00")

func templatesGcloudCloud_functionBinCleanupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionBinCleanupSh,
		"templates/gcloud/cloud_function/bin/cleanup.sh",
	)
}

func templatesGcloudCloud_functionBinCleanupSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionBinCleanupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/bin/cleanup.sh", size: 245, mode: os.FileMode(484), modTime: time.Unix(1602335380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionBinLaunchSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x4f\x4a\x03\x31\x14\x87\xf7\x73\x8a\x1f\xa9\x50\x45\x66\xda\x65\x19\x70\xeb\xaa\xfe\xa1\x56\x70\x91\x45\x43\xfa\xda\x84\xc9\x24\x43\xf2\x62\x2d\xa5\x57\xd0\x23\x78\x04\xf1\x4a\x9e\xc0\x23\x48\xdb\x29\xc8\xdb\x7e\xef\xfb\xde\x1b\xe0\x4e\x35\xb4\xb2\x8e\xa0\x43\xdb\x2a\xbf\xac\xb1\x68\x55\x43\x70\x41\x2b\x67\x42\xe2\x05\x8a\x01\xe6\xc6\x26\x24\x1d\x6d\xc7\x70\x2a\x7b\x6d\x28\x81\x0d\x61\x95\xbd\x66\x1b\xfc\x89\x77\xdb\xa2\x20\x6d\x02\x84\xf4\xf8\xf9\xf8\x06\xa6\x47\xd8\xfa\xf5\x19\xc0\x65\x4e\x04\xcd\xd1\x5d\x6b\x70\x00\xbd\x59\xbe\xaa\xaa\x4a\xfc\xdb\xfc\xfd\x7c\xff\xc2\x8c\x3a\xa7\x34\x1d\x2b\xcf\xb3\x29\x94\x5f\xc2\xfa\x2e\x33\xac\x3f\xa5\x83\x73\x61\x73\x50\xf7\xa7\x1f\x74\x4c\x89\x6b\xd1\xab\x2e\xa0\x73\x74\x28\x5f\xf0\xf8\xf0\x34\x87\x61\xee\xea\xd1\x68\x5c\x1d\xa7\x9e\x8c\x27\x63\x94\x4b\x0c\x77\x52\x34\xb4\x95\xa2\x86\x14\xaf\xca\x65\x92\x62\x3f\x94\x5e\x7a\x51\x14\xe7\xff\x52\xb9\x8a\xaa\xa5\x4d\x88\x0d\xca\x92\x55\x5c\x13\xdf\xec\x76\xa8\x6e\x7b\xe0\x5e\xb5\x84\xfd\xbe\xf8\x0b\x00\x00\xff\xff\x26\x31\x00\xbe\x52\x01\x00\x00")

func templatesGcloudCloud_functionBinLaunchShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionBinLaunchSh,
		"templates/gcloud/cloud_function/bin/launch.sh",
	)
}

func templatesGcloudCloud_functionBinLaunchSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionBinLaunchShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/bin/launch.sh", size: 338, mode: os.FileMode(420), modTime: time.Unix(1602340158, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionBinRemove_pyenvSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x4e\x02\x41\x10\x45\xf7\x75\x8a\x9f\x81\x85\x26\x0e\xba\xc6\x15\x89\x98\x90\x08\x0b\xa3\x6c\x90\x90\xce\x4c\x35\x53\x61\xba\x9a\x74\x17\xa3\x1c\xc0\xb5\x17\xf0\x12\x5e\xc9\x93\x18\x66\x61\x0c\xee\xff\xfb\xaf\xea\x0f\x30\x77\x3b\xf6\xd2\x32\xaa\x18\x82\xd3\x7a\x8c\xe0\x76\x8c\x83\x8a\x66\x73\x6d\x4b\x03\xcc\x3c\x1c\x46\xfb\xa3\x35\x51\xcb\x8e\x53\x96\xa8\xe8\x19\x7e\x93\x6c\xf9\x0a\xd6\x48\x46\xae\x92\xec\x0d\xaf\xd2\x43\xbf\x05\xb0\x86\xd1\x49\xb2\x83\x6b\xc1\xda\x49\x8a\x1a\x58\x0d\xd6\x38\x83\x64\xd4\xec\x45\xb9\x86\x28\xc4\x88\x32\x1b\x4a\x26\xca\xf1\x90\x2a\xc6\xf0\xa2\x96\xa4\x2e\x30\x86\x37\x97\xd7\x9b\x2a\xaa\x97\xed\x28\x37\x44\xe2\xb1\x5a\xa1\xf4\x28\xce\x6e\x2b\xb0\x5e\xdf\x9e\xb4\x4a\x00\xc0\x55\x13\x51\xbc\x28\xbe\x3f\xbe\x80\xfb\x78\x6a\x4d\x1c\x62\x27\xba\x1d\x63\xb8\x9c\x3d\x3e\x3d\x4f\x1e\xa6\x8b\xe5\x66\x31\x99\x4f\x8b\x9e\xd9\x1f\x59\xbb\x3f\x3f\x94\xfe\x5f\xb0\xcf\xa5\x70\x3e\x0c\x9d\x39\x3f\xdf\x81\xbb\xa8\x3c\x2a\xc8\x0b\xd1\x4f\x00\x00\x00\xff\xff\x5b\x14\x9e\x48\x71\x01\x00\x00")

func templatesGcloudCloud_functionBinRemove_pyenvShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionBinRemove_pyenvSh,
		"templates/gcloud/cloud_function/bin/remove_pyenv.sh",
	)
}

func templatesGcloudCloud_functionBinRemove_pyenvSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionBinRemove_pyenvShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/bin/remove_pyenv.sh", size: 369, mode: os.FileMode(493), modTime: time.Unix(1602335836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionBinSetup_pyenvSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x6e\x13\x31\x10\xbd\xfb\x2b\x9e\x36\x7b\x48\x90\x36\xa5\xd7\x54\x3d\xa0\x50\x20\x12\x24\x51\x1b\x90\x50\x5b\x45\x66\x77\x76\x77\x14\xef\x78\xb1\xbd\x09\x95\xb8\x72\xe6\x07\xf8\x09\x7e\x89\x2f\x41\x6e\x52\xd8\xe4\x50\x4b\x96\xec\xf1\x9b\x37\x6f\xde\x78\x80\x0f\x7a\x43\x25\x1b\x42\x6e\x9b\x46\x4b\x31\x41\xa3\x37\x04\x16\x1f\xb4\x31\x6a\x80\x55\xcd\x1e\x3e\x77\xdc\x06\xec\xd8\x18\xe4\x8e\x74\x20\x68\xb4\x0f\x24\x5b\x6c\xd9\x85\x4e\x1b\x90\x6c\xd9\x59\x69\x48\x02\xd4\x00\xaf\xa4\x78\x22\x41\xdc\xb6\x44\xa8\x09\x05\xb5\x24\x05\x49\xce\xe4\x51\x50\xc9\x42\x11\x17\xdf\xd4\x00\x8e\xbe\x76\xec\x28\x72\x78\x44\x55\x43\x3f\x1a\x2b\xe5\x29\x20\x23\xa5\xbc\xed\x5c\x4e\x48\x87\x05\x3b\xd1\x0d\x21\x7d\x39\x3a\x5b\xe7\x56\x4a\xae\xc6\xbe\x56\x8a\x4b\xdc\xde\x22\x1d\x1e\x94\x91\xf3\x6c\xc5\xe3\x3b\x2a\x47\x2d\xb2\xf7\x48\x97\x9f\x57\xef\x16\xf3\xf5\xa7\xab\xeb\x9b\xd9\x62\x3e\xc2\xfd\xfd\x45\xac\x2d\x0a\x00\x28\xaf\x2d\x92\x3b\xc1\x9f\x9f\xbf\x81\xd9\x5e\x3d\x4b\x85\xe5\x43\xa8\xad\x9c\x66\x27\x8f\x49\xfb\x5a\x4f\xad\x9e\x40\x54\xc9\x4a\x1d\xd3\x4e\xa3\x7d\x91\x54\x9f\x82\xfb\x16\x4e\x90\x9e\x27\x2a\x32\x1f\x30\xd3\xc5\xfc\xcd\xec\xed\xc7\xeb\xab\xf5\x62\xb9\xba\xb9\x4c\xb2\x8c\x44\x7f\x31\x94\x95\x4e\x37\xb4\xb3\x6e\x83\xe9\xf4\x32\x37\x5a\xaa\x04\x77\x3d\x65\x87\xf9\xc4\xe3\x3e\x1c\x57\x96\x95\xf6\xd1\xca\x13\x05\xff\x11\xe9\xb9\xda\xe7\x1b\x9b\x6b\x13\xaf\xaa\xe5\xf6\x5f\x9f\x59\xd6\xb5\x95\xd3\x05\x21\x46\x3d\x85\xae\x0d\xd6\x1a\x8f\x5d\x4d\x64\x54\x69\x1d\x38\xce\x75\x7c\xd6\x9f\xe9\x8b\xf0\x2d\x5c\xa0\xb0\xcf\xbb\x7d\xf4\x0b\x58\x26\x48\xf9\x60\x75\x5f\x80\x43\xca\xaa\xb0\x42\x7d\x83\x7f\xfd\x00\x5e\x5b\xa1\x71\xa2\xfe\x06\x00\x00\xff\xff\x6a\xc5\x0e\xa5\xdb\x02\x00\x00")

func templatesGcloudCloud_functionBinSetup_pyenvShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionBinSetup_pyenvSh,
		"templates/gcloud/cloud_function/bin/setup_pyenv.sh",
	)
}

func templatesGcloudCloud_functionBinSetup_pyenvSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionBinSetup_pyenvShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/bin/setup_pyenv.sh", size: 731, mode: os.FileMode(493), modTime: time.Unix(1602335843, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionMainPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x52\xcb\x8e\x9b\x40\x10\xbc\xcf\x57\x94\xbc\x17\x90\x56\x90\x5c\x57\x21\x4a\xa4\x68\x95\x53\x36\x42\xdc\xed\x31\xd3\xe0\xb1\x61\x9a\xcc\xc3\x8a\x65\xf9\xdf\x57\x0c\x0f\x61\x0e\x83\x98\xae\xae\xea\xae\xa2\xb1\xdc\xa3\xe9\xa4\xbb\x40\xf7\x03\x5b\x8f\xb3\x63\xa3\x9b\x9b\x10\xb1\xd4\xb3\xa2\x2e\x1b\x2c\x29\x5d\xfb\x05\x32\x7f\xbe\xa2\x63\xa9\xf6\x11\x22\x44\x7c\xa1\xd8\xdc\x25\xa9\x10\x8a\x1a\xdc\xef\xc8\xde\x83\xa9\xbd\x66\xf3\x47\xf6\x84\xc7\x23\xb1\xf4\x2f\x90\xf3\xe9\x9b\x00\x80\xdd\x6e\x57\x92\x1b\xd8\x28\x07\xcf\x90\xe6\x86\xdf\x55\xf5\x17\x33\x2a\x8b\xa0\x9f\xb6\x75\x13\x7c\x7c\xe6\x12\x92\x38\x7c\x56\x2e\x7c\x4f\x8d\xe0\xe3\x99\xea\xb9\xbf\x24\x1f\xac\xd9\x50\x54\x27\x82\x8d\xb2\x8e\xe0\xe9\xbf\x07\xdb\xa8\xed\xc8\x83\x1b\x5c\x65\x17\xc8\xc1\x9f\xa4\x47\x2d\x0d\x8e\x84\x91\x81\x14\xb4\x19\xa7\x5c\x89\xca\x85\x64\x92\x43\x70\xda\xb4\x6b\xf5\xd0\xcb\x0b\xed\x57\xa1\x6f\x27\xef\x87\xb7\x3c\x9f\xe6\x1e\xb8\x66\xce\xd8\xb6\xb9\xe2\xda\xe5\x5f\xb3\x2f\xb9\x1c\x74\xfe\x32\x55\xdf\xe3\xf9\xd4\xff\xfd\x90\x2d\x96\x89\x8d\x0f\xfb\x31\x36\x14\xab\x63\x2d\x4d\x57\x49\x1a\x51\x2f\xf8\x51\x7d\xfc\xfa\x80\x54\x2a\x6e\xb8\xf8\x73\x95\x9d\x56\x72\x0c\x66\xde\xf3\xc6\x01\x86\x48\xcd\xdc\x2e\x74\x1e\xc5\x12\x78\x12\x63\x2d\xe2\xf9\x0a\x6d\x86\xe0\x8b\xad\x7e\x3a\x77\x8d\x2e\x2d\xff\x51\x32\x91\xa4\xe2\x33\x00\x00\xff\xff\x89\xa8\x33\x6e\x6a\x02\x00\x00")

func templatesGcloudCloud_functionMainPyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionMainPy,
		"templates/gcloud/cloud_function/main.py",
	)
}

func templatesGcloudCloud_functionMainPy() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionMainPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/main.py", size: 618, mode: os.FileMode(420), modTime: time.Unix(1602339586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionModel__init__Py = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesGcloudCloud_functionModel__init__PyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionModel__init__Py,
		"templates/gcloud/cloud_function/model/__init__.py",
	)
}

func templatesGcloudCloud_functionModel__init__Py() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionModel__init__PyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/model/__init__.py", size: 0, mode: os.FileMode(420), modTime: time.Unix(1602336868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionModelArtifactsReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xc9\xd1\x09\x84\x30\x0c\x06\xe0\xf7\x4e\xf1\xc3\xbd\xdc\xc1\xd1\x1d\x1c\xc0\x21\x4a\x93\x6a\xb0\x1a\x49\xa2\xd0\xed\x05\x9f\xbf\x0f\x66\x25\xee\x28\x16\xd2\x4a\x0d\x4f\x69\x22\xc2\xd0\xcb\xe0\xe5\x66\xc2\xfe\xba\x1c\xa1\x88\x55\x1c\x24\xc6\x35\xd4\x06\xbe\x9c\x97\xfc\xc7\x29\x75\xeb\x8c\x26\x9d\xfd\x97\xd3\x13\x00\x00\xff\xff\x09\x94\x0f\x8e\x52\x00\x00\x00")

func templatesGcloudCloud_functionModelArtifactsReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionModelArtifactsReadmeMd,
		"templates/gcloud/cloud_function/model/artifacts/README.md",
	)
}

func templatesGcloudCloud_functionModelArtifactsReadmeMd() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionModelArtifactsReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/model/artifacts/README.md", size: 82, mode: os.FileMode(420), modTime: time.Unix(1602336830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionModelArtifacts__init__Py = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesGcloudCloud_functionModelArtifacts__init__PyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionModelArtifacts__init__Py,
		"templates/gcloud/cloud_function/model/artifacts/__init__.py",
	)
}

func templatesGcloudCloud_functionModelArtifacts__init__Py() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionModelArtifacts__init__PyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/model/artifacts/__init__.py", size: 0, mode: os.FileMode(420), modTime: time.Unix(1602336876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionModelArtifactsFilesPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4e\x86\x30\x10\x84\xef\x3c\xc5\x84\x13\x24\xbf\xe5\x4e\xa2\x89\xaf\x60\xbc\x37\x8d\x2c\x50\x2d\x5d\xd2\xee\x7f\xf8\xdf\xde\x6c\x91\xa2\x27\xb9\x6c\x96\xec\x7c\x33\x1d\xbf\xed\x9c\x04\x9c\x9b\xa6\x99\x68\xc6\x42\x62\x77\x27\x6b\x37\xfb\x40\x36\xba\x8d\x46\x64\x49\x3d\x9e\x5e\x74\x8e\x0d\x00\xb4\x6d\xfb\x46\x72\x4f\x31\xc3\x41\xaf\x21\x0c\x07\x95\xc0\x47\xc8\xea\x33\x26\x9f\xe8\x43\x38\x3d\x4c\x91\xbc\xa6\x25\x1f\x62\xfd\x2a\x1c\x9d\xc2\x47\xbc\xaf\x84\xb2\xf3\xfc\x07\x44\xc8\xfa\xb7\xc2\xe0\x72\x85\x14\x9b\xfd\x21\x2b\xc7\x43\xd1\x91\x59\xcc\x0d\xed\xc6\x13\x05\xb3\x7f\x85\xb6\x3f\xcc\x7f\xc2\x5e\xfe\x6a\x37\xdf\x43\xf8\x37\x7c\x55\x9c\xec\x41\x15\x83\xf0\xf0\xcb\xe4\xec\xa4\xcc\x2b\xea\x33\x38\x1b\x3d\x37\x93\x4f\xfa\xb8\xee\xdc\x13\xb9\x50\x4a\xb6\xb6\x34\x61\xfb\x83\x91\x4a\xce\x2a\xfb\x64\x1f\xbb\xca\xbb\x5d\xad\xf5\xdf\x01\x00\x00\xff\xff\x7e\xe2\x05\x91\xb6\x01\x00\x00")

func templatesGcloudCloud_functionModelArtifactsFilesPyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionModelArtifactsFilesPy,
		"templates/gcloud/cloud_function/model/artifacts/files.py",
	)
}

func templatesGcloudCloud_functionModelArtifactsFilesPy() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionModelArtifactsFilesPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/model/artifacts/files.py", size: 438, mode: os.FileMode(420), modTime: time.Unix(1602337106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionModelPredictPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xc1\x4a\xc4\x40\x0c\x86\xef\x7d\x8a\xdf\xf1\xb2\x0b\xba\x0f\xd0\x83\xb8\xe0\xd9\x05\xd9\xbb\x0c\x9d\x74\x67\x70\x4c\x96\x74\x4a\x29\xe2\xbb\xcb\xa4\x5d\xad\x3d\x95\x49\xfe\xef\x4b\x12\xa8\x47\x16\x1f\xde\x3f\x25\x50\xde\xed\xdb\x06\x00\x94\xca\xa8\x8c\x57\x61\x02\xee\xf1\x7c\x3e\xbd\x9c\xac\x0d\x9e\xc3\xad\x3a\xcb\xa8\xb0\x18\x22\x29\x35\x4d\x53\x61\x57\xa5\x90\xba\xb2\xb3\xc2\x03\x12\x5f\xc7\xd2\xa2\x3e\xed\xf1\xf8\x64\x3f\x8b\xc3\x39\x77\x8e\x69\x40\x1a\x50\x22\xfd\xe6\xf6\xe8\x47\xee\x4a\x12\x46\x2f\xba\x4a\x7c\x17\x13\x13\x32\x79\xe5\xc4\x97\xc5\x7a\x30\xcc\x51\x2f\xc3\x02\xac\x9f\xe9\xb0\x33\x5d\x8b\xa3\xe9\x92\xb0\xd7\x19\x9d\x70\xf1\xc9\xe2\xd5\xb7\x0c\x6e\xfd\xc3\x42\x7a\xb3\xb5\x36\xb0\x7f\xf1\x29\x95\xb8\x5d\x79\x9d\xb7\xce\x59\x6f\xe2\x79\x86\x94\x48\x8a\xe0\x8b\xaf\x8d\x98\x64\xcc\x01\x39\x7d\x10\x8a\xac\x47\x3b\xdc\x56\xdf\x9e\xf9\xcb\xfd\xc1\x5c\x0b\x17\x29\x67\xc1\x24\x9a\xc3\x9d\xfb\x6e\x7e\x02\x00\x00\xff\xff\xf4\xc0\x21\x96\xa3\x01\x00\x00")

func templatesGcloudCloud_functionModelPredictPyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionModelPredictPy,
		"templates/gcloud/cloud_function/model/predict.py",
	)
}

func templatesGcloudCloud_functionModelPredictPy() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionModelPredictPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/model/predict.py", size: 419, mode: os.FileMode(420), modTime: time.Unix(1602339608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionRequirementsDevTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x2b\xd6\x4d\x2b\x4a\xcc\x4d\x2d\xcf\x2f\xca\xb6\xb5\x35\xd2\x33\xd0\x33\xe0\x02\x04\x00\x00\xff\xff\x7b\xc3\x7d\x23\x1b\x00\x00\x00")

func templatesGcloudCloud_functionRequirementsDevTxtBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionRequirementsDevTxt,
		"templates/gcloud/cloud_function/requirements-dev.txt",
	)
}

func templatesGcloudCloud_functionRequirementsDevTxt() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionRequirementsDevTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/requirements-dev.txt", size: 27, mode: os.FileMode(420), modTime: time.Unix(1602339303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_functionRequirementsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xcb\x49\x2c\xce\xb6\xb5\x35\xd4\x33\xd0\x33\xe2\x02\x04\x00\x00\xff\xff\x10\xa8\xa0\xc4\x0d\x00\x00\x00")

func templatesGcloudCloud_functionRequirementsTxtBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_functionRequirementsTxt,
		"templates/gcloud/cloud_function/requirements.txt",
	)
}

func templatesGcloudCloud_functionRequirementsTxt() (*asset, error) {
	bytes, err := templatesGcloudCloud_functionRequirementsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_function/requirements.txt", size: 13, mode: os.FileMode(420), modTime: time.Unix(1602012713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\x41\x6f\xe2\x3e\x10\xc5\xef\xf9\x14\x4f\xa2\xc7\x26\xf9\xff\xb5\x97\x8a\x5b\x97\x82\xa8\x2a\x48\x14\xc1\xae\x7a\xaa\x26\xce\x40\x46\x38\xb6\xd7\x76\x60\xf9\xf6\x2b\x43\xda\xdd\x8b\x35\xb2\xe6\xfd\xe6\xcd\x9b\x19\xf6\x81\x11\x7b\x86\x3d\x1c\x44\x09\x69\x68\x39\xf6\xf1\xc2\xe9\x45\x7d\x8d\xbd\x35\x90\x81\x8e\x5c\x64\x33\xf4\x31\xba\x30\x2f\xcb\x7e\x6c\x8b\xce\xaa\x13\xfb\x42\xd9\xa1\xfc\x28\xdd\xad\x31\x5b\x35\xd5\x06\xf7\x7a\xfe\xad\x78\xca\x83\x96\x21\xcb\x66\x78\xd6\xda\x5e\x10\x22\x45\x1e\xd8\xc4\x00\x32\x1d\xb4\x3d\x62\xe0\x10\xe8\xc8\x01\xd1\x42\x86\x81\x3b\xa1\xc8\xfa\x0a\x72\x8e\xc9\x43\xcc\xcd\xdb\x9b\xa1\x28\x67\x4e\x8a\x90\x2d\xb7\x3f\x50\xbf\xef\xd6\xd5\x76\xbf\xfd\xbe\x5f\xad\x96\xcd\xf2\x05\x3b\x3f\x72\x1a\xb4\xb0\xee\x0a\x6d\x15\x69\x28\xdb\x71\xc2\x26\x80\xb2\x26\x92\x18\xf6\x9f\xab\x24\xc8\x73\x5d\x7f\xac\xab\xcd\x12\x25\x39\x97\xfd\xac\x9a\xb7\x97\xd7\x06\x0f\x9f\xdf\xd9\xa2\xaa\xdf\x51\xa0\x28\x13\xf8\xd5\x84\x48\x5a\xc3\x79\xdb\x8d\x2a\x8a\x35\xe8\xd8\xb1\xe9\xd8\x28\xe1\x50\x64\xcd\x7e\x0b\x27\x0e\x32\x35\xae\x34\x85\x13\x8e\xa3\x11\x65\xbd\x49\x88\x66\xbc\x6f\x73\xe1\x16\x81\xfd\x59\x14\xc3\x9a\x7f\xbc\x85\x48\x3e\x8e\xae\xc0\x9a\x7d\x6a\xc3\x38\xdd\xe6\x8b\x32\x4b\xe2\xa4\x65\xff\x88\x8b\xc4\x1e\xd6\x30\x2e\xd6\x9f\xd8\x27\x6b\x8a\xc3\x3d\xdb\x27\xc4\xde\x33\x75\x21\x5d\x6d\x65\x3d\xd8\x9c\xc5\x5b\x73\x4f\xff\xa6\x1c\x46\x1d\xc5\x69\xc6\xa2\xde\x43\x59\xcf\xe1\x11\x62\x94\x67\x9a\xa6\x9a\x71\x68\xd9\xc3\x1e\xa6\x01\x21\x9b\xa5\x3c\x5b\x06\xff\x1a\x49\xff\xcd\xd6\x73\x00\x9d\x49\x34\xb5\x9a\x8b\x6c\xb1\x79\x01\xff\x66\xf5\x65\x1b\x79\xde\x8a\xe9\x30\x7f\xa8\xab\x66\x87\x3c\x9f\x78\xf8\x1f\x79\x3e\xf9\xc4\x53\xaa\x65\x60\x3b\x46\xfc\x87\x81\xc4\xcc\xc9\xb9\x3f\x01\x00\x00\xff\xff\xd8\xd0\x44\x54\xa0\x02\x00\x00")

func templatesGcloudCloud_runDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runDockerfile,
		"templates/gcloud/cloud_run/Dockerfile",
	)
}

func templatesGcloudCloud_runDockerfile() (*asset, error) {
	bytes, err := templatesGcloudCloud_runDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/Dockerfile", size: 672, mode: os.FileMode(420), modTime: time.Unix(1602012713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x4f\x0b\x82\x40\x10\xc5\xcf\xcd\xa7\x98\x83\xa0\x1e\x54\xba\x0a\x41\x1e\x84\x82\xb2\x88\x12\x3a\x89\xe9\x84\xc2\xb6\x2d\xee\x9f\x10\xfc\xf0\xb1\x86\x0a\xdd\xde\x3c\x7e\xbc\xdf\xe4\xfb\xcb\xf5\x96\x1c\xd2\x2c\x2f\xb2\xe4\x98\x6e\x1c\x4f\x36\xc4\x18\x8a\x4f\x8d\x03\x76\x64\x70\xc0\x4a\x2b\x0c\x6a\x74\x23\x17\x83\x27\xae\x7f\xbd\x1f\xd4\x64\x00\xc2\xf3\xee\x94\xdd\x63\x6c\xb9\x54\x25\x63\xa8\xf9\x94\x14\x49\x85\x15\xa3\x92\x03\xcc\x6d\x0c\xab\x6d\x18\x3d\x5a\x1e\x75\xf4\x7a\x1b\x2a\x44\x4f\xdc\x84\xb2\x01\x98\x88\x65\x62\x66\x25\x29\x2d\x66\x14\x1d\xef\xef\x6b\x1f\xc0\xda\xec\xb8\xe8\x6d\x02\x18\xc5\x8b\x6d\x3c\xb5\xb0\xa2\x6f\x00\x00\x00\xff\xff\x7d\x4f\x8a\xdf\xf2\x00\x00\x00")

func templatesGcloudCloud_runMakefileBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runMakefile,
		"templates/gcloud/cloud_run/Makefile",
	)
}

func templatesGcloudCloud_runMakefile() (*asset, error) {
	bytes, err := templatesGcloudCloud_runMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/Makefile", size: 242, mode: os.FileMode(420), modTime: time.Unix(1602336374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\xb1\x8a\xc2\x40\x10\x06\xe0\x7e\x9f\xe2\x3f\xae\xb9\x6b\x92\xfe\xba\x43\x1b\x41\xac\xec\xc4\x62\x9d\x9d\xb8\x03\x66\x27\xcc\xce\x12\x42\xc8\xbb\x0b\x82\x76\x5f\xf1\x7d\x63\x5d\xd1\xed\xc5\x98\x5c\x6d\x39\xc5\x91\xb1\x6d\x21\xfc\xa7\x84\x88\xc4\x95\x4c\x26\x17\x2d\xd0\x01\x8b\x36\x03\x3d\xb4\x25\x58\x2b\x20\x2d\x1e\xa5\xb0\x7d\x85\x70\xce\x52\x31\xb4\x42\xaf\x3b\xc7\x0a\x32\x8e\xce\x09\xb3\x78\x86\x67\xc6\x45\x27\xb6\xe8\x6a\xd8\x1d\x0f\xd7\x9f\xec\x3e\xd5\xbf\xbe\xbf\x8b\xe7\x76\xeb\x48\xc7\xfe\x1d\xa2\x7c\xf8\xdb\x85\x67\x00\x00\x00\xff\xff\x97\xe6\x28\x81\xa3\x00\x00\x00")

func templatesGcloudCloud_runReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runReadmeMd,
		"templates/gcloud/cloud_run/README.md",
	)
}

func templatesGcloudCloud_runReadmeMd() (*asset, error) {
	bytes, err := templatesGcloudCloud_runReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/README.md", size: 163, mode: os.FileMode(420), modTime: time.Unix(1602336576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runBin_configSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xad\x28\xc8\x2f\x2a\x51\x08\x88\x0c\xf1\xf0\xf7\x8b\x0f\x73\x0d\x0a\xf6\xf4\xf7\xb3\x35\xd6\x33\xd7\x33\xe0\xe2\x82\x4a\x86\x79\x06\x85\x84\x3a\xfa\xb8\xfa\x85\xc5\xfb\x39\xfa\xba\xda\xaa\x68\x14\x54\xa6\xe6\x95\x29\xe4\xe4\x27\x27\xe6\x68\x2a\xd4\xd4\x28\x28\x29\xc1\xd4\x06\xb9\x06\xf8\xc7\x07\xf9\xfb\x87\xd8\xaa\x68\x24\xa7\x28\xa8\x68\xa4\x64\x16\xe5\x25\xe6\xa6\x2a\xa8\x18\x68\xea\xeb\xe9\x29\xa8\xa9\x29\x14\x94\xa7\x68\x72\x01\x02\x00\x00\xff\xff\x02\x1a\x65\xd0\x78\x00\x00\x00")

func templatesGcloudCloud_runBin_configShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runBin_configSh,
		"templates/gcloud/cloud_run/bin/_config.sh",
	)
}

func templatesGcloudCloud_runBin_configSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_runBin_configShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/bin/_config.sh", size: 120, mode: os.FileMode(493), modTime: time.Unix(1602336384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runBinCleanupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x31\x4e\x03\x31\x10\x05\xd0\xde\xa7\xf8\x72\x28\xa0\x88\x0f\x40\x0d\x74\x74\x94\x91\x36\xd6\x78\xbc\x6b\x65\x3d\xb3\x1a\x1b\xc4\x4a\xdb\x52\x73\x01\x2e\xc1\x95\x38\x09\x4a\xa0\x80\x66\xa4\xf9\xfa\x7a\x7f\x87\xc7\x78\xe2\x5c\x66\x06\x69\xad\x51\xd2\x2d\x8e\x35\x9e\x18\x34\x73\x94\x23\xdc\x0e\x4f\x53\x69\x68\x64\x65\xe9\x30\xae\xfa\xc2\x0d\x71\x9e\xa1\x19\x7d\x62\x2c\x2b\x45\x9a\x18\x67\xa4\x21\x9b\xd6\x4b\x4c\xcf\x66\x2c\x1d\xa9\x18\x53\x57\x5b\x9d\x63\x9a\x14\xfe\x20\xf8\x7a\xff\x04\x1e\x8a\xa4\x22\x23\xa2\xa4\x1f\xf6\xfc\xfc\xc3\x42\x08\xde\xb9\x5c\x24\x21\x60\xc3\x68\xbc\x60\x7f\x0f\x7f\x3d\x0c\xbf\xbd\x61\xd8\x0e\x61\x59\xe9\x72\xf5\xea\xc6\x63\xc3\x6b\xb4\xb1\xc1\x2a\xf6\x96\xff\x6e\x7e\xbc\x01\x77\x2a\x1c\xfc\x77\x00\x00\x00\xff\xff\x51\xbf\xac\xf4\xf5\x00\x00\x00")

func templatesGcloudCloud_runBinCleanupShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runBinCleanupSh,
		"templates/gcloud/cloud_run/bin/cleanup.sh",
	)
}

func templatesGcloudCloud_runBinCleanupSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_runBinCleanupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/bin/cleanup.sh", size: 245, mode: os.FileMode(484), modTime: time.Unix(1602336384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runBinRemove_pyenvSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x4e\x02\x41\x10\x45\xf7\x75\x8a\x9f\x81\x85\x26\x0e\xba\xc6\x15\x89\x98\x90\x08\x0b\xa3\x6c\x90\x90\xce\x4c\x35\x53\x61\xba\x9a\x74\x17\xa3\x1c\xc0\xb5\x17\xf0\x12\x5e\xc9\x93\x18\x66\x61\x0c\xee\xff\xfb\xaf\xea\x0f\x30\x77\x3b\xf6\xd2\x32\xaa\x18\x82\xd3\x7a\x8c\xe0\x76\x8c\x83\x8a\x66\x73\x6d\x4b\x03\xcc\x3c\x1c\x46\xfb\xa3\x35\x51\xcb\x8e\x53\x96\xa8\xe8\x19\x7e\x93\x6c\xf9\x0a\xd6\x48\x46\xae\x92\xec\x0d\xaf\xd2\x43\xbf\x05\xb0\x86\xd1\x49\xb2\x83\x6b\xc1\xda\x49\x8a\x1a\x58\x0d\xd6\x38\x83\x64\xd4\xec\x45\xb9\x86\x28\xc4\x88\x32\x1b\x4a\x26\xca\xf1\x90\x2a\xc6\xf0\xa2\x96\xa4\x2e\x30\x86\x37\x97\xd7\x9b\x2a\xaa\x97\xed\x28\x37\x44\xe2\xb1\x5a\xa1\xf4\x28\xce\x6e\x2b\xb0\x5e\xdf\x9e\xb4\x4a\x00\xc0\x55\x13\x51\xbc\x28\xbe\x3f\xbe\x80\xfb\x78\x6a\x4d\x1c\x62\x27\xba\x1d\x63\xb8\x9c\x3d\x3e\x3d\x4f\x1e\xa6\x8b\xe5\x66\x31\x99\x4f\x8b\x9e\xd9\x1f\x59\xbb\x3f\x3f\x94\xfe\x5f\xb0\xcf\xa5\x70\x3e\x0c\x9d\x39\x3f\xdf\x81\xbb\xa8\x3c\x2a\xc8\x0b\xd1\x4f\x00\x00\x00\xff\xff\x5b\x14\x9e\x48\x71\x01\x00\x00")

func templatesGcloudCloud_runBinRemove_pyenvShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runBinRemove_pyenvSh,
		"templates/gcloud/cloud_run/bin/remove_pyenv.sh",
	)
}

func templatesGcloudCloud_runBinRemove_pyenvSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_runBinRemove_pyenvShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/bin/remove_pyenv.sh", size: 369, mode: os.FileMode(493), modTime: time.Unix(1602336384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runBinSetup_pyenvSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x6e\x13\x31\x10\xbd\xfb\x2b\x9e\x36\x7b\x48\x90\x36\xa5\xd7\x54\x3d\xa0\x50\x20\x12\x24\x51\x1b\x90\x50\x5b\x45\x66\x77\x76\x77\x14\xef\x78\xb1\xbd\x09\x95\xb8\x72\xe6\x07\xf8\x09\x7e\x89\x2f\x41\x6e\x52\xd8\xe4\x50\x4b\x96\xec\xf1\x9b\x37\x6f\xde\x78\x80\x0f\x7a\x43\x25\x1b\x42\x6e\x9b\x46\x4b\x31\x41\xa3\x37\x04\x16\x1f\xb4\x31\x6a\x80\x55\xcd\x1e\x3e\x77\xdc\x06\xec\xd8\x18\xe4\x8e\x74\x20\x68\xb4\x0f\x24\x5b\x6c\xd9\x85\x4e\x1b\x90\x6c\xd9\x59\x69\x48\x02\xd4\x00\xaf\xa4\x78\x22\x41\xdc\xb6\x44\xa8\x09\x05\xb5\x24\x05\x49\xce\xe4\x51\x50\xc9\x42\x11\x17\xdf\xd4\x00\x8e\xbe\x76\xec\x28\x72\x78\x44\x55\x43\x3f\x1a\x2b\xe5\x29\x20\x23\xa5\xbc\xed\x5c\x4e\x48\x87\x05\x3b\xd1\x0d\x21\x7d\x39\x3a\x5b\xe7\x56\x4a\xae\xc6\xbe\x56\x8a\x4b\xdc\xde\x22\x1d\x1e\x94\x91\xf3\x6c\xc5\xe3\x3b\x2a\x47\x2d\xb2\xf7\x48\x97\x9f\x57\xef\x16\xf3\xf5\xa7\xab\xeb\x9b\xd9\x62\x3e\xc2\xfd\xfd\x45\xac\x2d\x0a\x00\x28\xaf\x2d\x92\x3b\xc1\x9f\x9f\xbf\x81\xd9\x5e\x3d\x4b\x85\xe5\x43\xa8\xad\x9c\x66\x27\x8f\x49\xfb\x5a\x4f\xad\x9e\x40\x54\xc9\x4a\x1d\xd3\x4e\xa3\x7d\x91\x54\x9f\x82\xfb\x16\x4e\x90\x9e\x27\x2a\x32\x1f\x30\xd3\xc5\xfc\xcd\xec\xed\xc7\xeb\xab\xf5\x62\xb9\xba\xb9\x4c\xb2\x8c\x44\x7f\x31\x94\x95\x4e\x37\xb4\xb3\x6e\x83\xe9\xf4\x32\x37\x5a\xaa\x04\x77\x3d\x65\x87\xf9\xc4\xe3\x3e\x1c\x57\x96\x95\xf6\xd1\xca\x13\x05\xff\x11\xe9\xb9\xda\xe7\x1b\x9b\x6b\x13\xaf\xaa\xe5\xf6\x5f\x9f\x59\xd6\xb5\x95\xd3\x05\x21\x46\x3d\x85\xae\x0d\xd6\x1a\x8f\x5d\x4d\x64\x54\x69\x1d\x38\xce\x75\x7c\xd6\x9f\xe9\x8b\xf0\x2d\x5c\xa0\xb0\xcf\xbb\x7d\xf4\x0b\x58\x26\x48\xf9\x60\x75\x5f\x80\x43\xca\xaa\xb0\x42\x7d\x83\x7f\xfd\x00\x5e\x5b\xa1\x71\xa2\xfe\x06\x00\x00\xff\xff\x6a\xc5\x0e\xa5\xdb\x02\x00\x00")

func templatesGcloudCloud_runBinSetup_pyenvShBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runBinSetup_pyenvSh,
		"templates/gcloud/cloud_run/bin/setup_pyenv.sh",
	)
}

func templatesGcloudCloud_runBinSetup_pyenvSh() (*asset, error) {
	bytes, err := templatesGcloudCloud_runBinSetup_pyenvShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/bin/setup_pyenv.sh", size: 731, mode: os.FileMode(493), modTime: time.Unix(1602336384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runMainPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xcd\x6a\x03\x21\x1c\xc4\xef\x3e\xc5\x90\x1e\x54\x08\xdb\x3d\x86\x82\x90\x43\xc9\xb1\x5b\xca\xde\xc5\x66\xff\x9b\xd8\xee\xaa\xf5\x23\x50\x42\xde\xbd\xec\x17\x14\x4f\xbf\x61\x1c\x67\xb4\x63\xf0\x31\xc3\x27\xc6\xfa\xe8\x47\xf4\x83\x49\xdf\x58\xd5\xd3\x04\x8c\x99\x10\xa0\x16\x10\x5a\x3b\x33\x92\xd6\x92\x31\x76\x34\x21\x54\xd1\x97\x4c\x82\x3f\x87\x48\x9d\x3d\x67\x2e\x59\x47\x3d\xee\x77\x54\xa7\xe2\xce\xd9\x7a\xf7\x66\x46\xc2\xe3\x21\x22\xfd\x14\x4a\x59\xbe\x30\x00\x58\x49\x7f\x25\xef\xa0\x36\xac\x2e\xb4\x48\x42\xce\xae\x27\x1c\xdb\xe6\xb5\xc1\xcd\x0c\xb6\x33\x99\x90\xaf\xb4\x79\xd7\x98\x54\x86\x0c\x85\xf5\x7d\xf1\x3f\x57\xae\x96\x5c\xa2\xc3\x24\xd8\xfe\x57\x2c\x37\xa6\xfe\xb6\xc7\x36\x07\x4a\x61\xa7\xf5\x68\xac\xd3\x7a\xb7\x34\x9c\xd7\x15\x27\x3a\xfa\x2c\x17\xd5\xc6\x42\x7b\x5c\x7d\xca\x8a\xd7\xd5\x7c\xf8\x1e\xd3\x37\x29\xeb\xb2\xf0\xa9\x22\x77\xb3\xd1\xbb\x69\x82\xe0\xef\xcd\x47\xcb\xf7\x38\xd4\x87\x5a\x4a\xf9\x17\x00\x00\xff\xff\x2d\xde\xab\x6e\x66\x01\x00\x00")

func templatesGcloudCloud_runMainPyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runMainPy,
		"templates/gcloud/cloud_run/main.py",
	)
}

func templatesGcloudCloud_runMainPy() (*asset, error) {
	bytes, err := templatesGcloudCloud_runMainPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/main.py", size: 358, mode: os.FileMode(420), modTime: time.Unix(1602012713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runModelPredictPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x41\x6e\x03\x21\x0c\x45\xf7\x9c\xe2\x6b\x56\xc9\xa2\x39\xc0\x2c\x2a\xe5\x0a\x55\x2f\x80\x06\x4f\xb0\x4a\xec\xd4\x18\x45\x73\xfb\x0a\x66\x52\xb5\xac\x00\xf9\xbf\xff\x1c\x42\xa2\x15\x0f\xa3\xc4\x8b\x9f\x8c\xbe\x1b\x55\x9f\xd1\x5f\x67\xbc\xbd\x8f\xcb\x1c\x00\x60\x9a\xa6\xcf\xcc\x15\x5c\xe1\x99\x7e\x23\x67\xac\x4d\x16\x67\x15\xac\x6a\xd8\xb4\x19\xee\x71\xc9\x2c\x84\x42\xd1\x84\xe5\x86\xbb\x26\x2a\x97\x81\xb9\xda\xad\xee\xc0\x7e\x8e\x42\x9c\x46\xe1\x8c\xeb\x28\x64\x95\x68\x1b\x16\x15\x8f\x3c\x00\xbd\x71\x40\xc0\xf2\x68\x5e\x77\xd6\x07\x79\x33\xf9\x83\xfb\x17\x7f\xb2\xe7\xc3\x67\x24\x0f\xe3\x6e\x1a\x25\x21\xca\x06\xf5\x4c\x86\x14\x3d\xf6\x41\x3c\xb5\x95\x84\xc2\x5f\x04\x57\xd8\xa0\x5f\x5e\xcb\x87\xdd\xb7\xff\xbd\xb4\xc3\x4f\x00\x00\x00\xff\xff\xd1\x3a\xf5\xe0\x3e\x01\x00\x00")

func templatesGcloudCloud_runModelPredictPyBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runModelPredictPy,
		"templates/gcloud/cloud_run/model/predict.py",
	)
}

func templatesGcloudCloud_runModelPredictPy() (*asset, error) {
	bytes, err := templatesGcloudCloud_runModelPredictPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/model/predict.py", size: 318, mode: os.FileMode(420), modTime: time.Unix(1602012713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runRequirementsDevTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x2b\xd6\x4d\x2b\x4a\xcc\x4d\x2d\xcf\x2f\xca\xb6\xb5\x35\xd2\x33\xd0\x33\xe0\x02\x04\x00\x00\xff\xff\x7b\xc3\x7d\x23\x1b\x00\x00\x00")

func templatesGcloudCloud_runRequirementsDevTxtBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runRequirementsDevTxt,
		"templates/gcloud/cloud_run/requirements-dev.txt",
	)
}

func templatesGcloudCloud_runRequirementsDevTxt() (*asset, error) {
	bytes, err := templatesGcloudCloud_runRequirementsDevTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/requirements-dev.txt", size: 27, mode: os.FileMode(420), modTime: time.Unix(1602339341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGcloudCloud_runRequirementsTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesGcloudCloud_runRequirementsTxtBytes() ([]byte, error) {
	return bindataRead(
		_templatesGcloudCloud_runRequirementsTxt,
		"templates/gcloud/cloud_run/requirements.txt",
	)
}

func templatesGcloudCloud_runRequirementsTxt() (*asset, error) {
	bytes, err := templatesGcloudCloud_runRequirementsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/gcloud/cloud_run/requirements.txt", size: 0, mode: os.FileMode(420), modTime: time.Unix(1602012713, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/gcloud/cloud_function/Makefile":                    templatesGcloudCloud_functionMakefile,
	"templates/gcloud/cloud_function/README.md":                   templatesGcloudCloud_functionReadmeMd,
	"templates/gcloud/cloud_function/bin/_config.sh":              templatesGcloudCloud_functionBin_configSh,
	"templates/gcloud/cloud_function/bin/cleanup.sh":              templatesGcloudCloud_functionBinCleanupSh,
	"templates/gcloud/cloud_function/bin/launch.sh":               templatesGcloudCloud_functionBinLaunchSh,
	"templates/gcloud/cloud_function/bin/remove_pyenv.sh":         templatesGcloudCloud_functionBinRemove_pyenvSh,
	"templates/gcloud/cloud_function/bin/setup_pyenv.sh":          templatesGcloudCloud_functionBinSetup_pyenvSh,
	"templates/gcloud/cloud_function/main.py":                     templatesGcloudCloud_functionMainPy,
	"templates/gcloud/cloud_function/model/__init__.py":           templatesGcloudCloud_functionModel__init__Py,
	"templates/gcloud/cloud_function/model/artifacts/README.md":   templatesGcloudCloud_functionModelArtifactsReadmeMd,
	"templates/gcloud/cloud_function/model/artifacts/__init__.py": templatesGcloudCloud_functionModelArtifacts__init__Py,
	"templates/gcloud/cloud_function/model/artifacts/files.py":    templatesGcloudCloud_functionModelArtifactsFilesPy,
	"templates/gcloud/cloud_function/model/predict.py":            templatesGcloudCloud_functionModelPredictPy,
	"templates/gcloud/cloud_function/requirements-dev.txt":        templatesGcloudCloud_functionRequirementsDevTxt,
	"templates/gcloud/cloud_function/requirements.txt":            templatesGcloudCloud_functionRequirementsTxt,
	"templates/gcloud/cloud_run/Dockerfile":                       templatesGcloudCloud_runDockerfile,
	"templates/gcloud/cloud_run/Makefile":                         templatesGcloudCloud_runMakefile,
	"templates/gcloud/cloud_run/README.md":                        templatesGcloudCloud_runReadmeMd,
	"templates/gcloud/cloud_run/bin/_config.sh":                   templatesGcloudCloud_runBin_configSh,
	"templates/gcloud/cloud_run/bin/cleanup.sh":                   templatesGcloudCloud_runBinCleanupSh,
	"templates/gcloud/cloud_run/bin/remove_pyenv.sh":              templatesGcloudCloud_runBinRemove_pyenvSh,
	"templates/gcloud/cloud_run/bin/setup_pyenv.sh":               templatesGcloudCloud_runBinSetup_pyenvSh,
	"templates/gcloud/cloud_run/main.py":                          templatesGcloudCloud_runMainPy,
	"templates/gcloud/cloud_run/model/predict.py":                 templatesGcloudCloud_runModelPredictPy,
	"templates/gcloud/cloud_run/requirements-dev.txt":             templatesGcloudCloud_runRequirementsDevTxt,
	"templates/gcloud/cloud_run/requirements.txt":                 templatesGcloudCloud_runRequirementsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"gcloud": &bintree{nil, map[string]*bintree{
			"cloud_function": &bintree{nil, map[string]*bintree{
				"Makefile":  &bintree{templatesGcloudCloud_functionMakefile, map[string]*bintree{}},
				"README.md": &bintree{templatesGcloudCloud_functionReadmeMd, map[string]*bintree{}},
				"bin": &bintree{nil, map[string]*bintree{
					"_config.sh":      &bintree{templatesGcloudCloud_functionBin_configSh, map[string]*bintree{}},
					"cleanup.sh":      &bintree{templatesGcloudCloud_functionBinCleanupSh, map[string]*bintree{}},
					"launch.sh":       &bintree{templatesGcloudCloud_functionBinLaunchSh, map[string]*bintree{}},
					"remove_pyenv.sh": &bintree{templatesGcloudCloud_functionBinRemove_pyenvSh, map[string]*bintree{}},
					"setup_pyenv.sh":  &bintree{templatesGcloudCloud_functionBinSetup_pyenvSh, map[string]*bintree{}},
				}},
				"main.py": &bintree{templatesGcloudCloud_functionMainPy, map[string]*bintree{}},
				"model": &bintree{nil, map[string]*bintree{
					"__init__.py": &bintree{templatesGcloudCloud_functionModel__init__Py, map[string]*bintree{}},
					"artifacts": &bintree{nil, map[string]*bintree{
						"README.md":   &bintree{templatesGcloudCloud_functionModelArtifactsReadmeMd, map[string]*bintree{}},
						"__init__.py": &bintree{templatesGcloudCloud_functionModelArtifacts__init__Py, map[string]*bintree{}},
						"files.py":    &bintree{templatesGcloudCloud_functionModelArtifactsFilesPy, map[string]*bintree{}},
					}},
					"predict.py": &bintree{templatesGcloudCloud_functionModelPredictPy, map[string]*bintree{}},
				}},
				"requirements-dev.txt": &bintree{templatesGcloudCloud_functionRequirementsDevTxt, map[string]*bintree{}},
				"requirements.txt":     &bintree{templatesGcloudCloud_functionRequirementsTxt, map[string]*bintree{}},
			}},
			"cloud_run": &bintree{nil, map[string]*bintree{
				"Dockerfile": &bintree{templatesGcloudCloud_runDockerfile, map[string]*bintree{}},
				"Makefile":   &bintree{templatesGcloudCloud_runMakefile, map[string]*bintree{}},
				"README.md":  &bintree{templatesGcloudCloud_runReadmeMd, map[string]*bintree{}},
				"bin": &bintree{nil, map[string]*bintree{
					"_config.sh":      &bintree{templatesGcloudCloud_runBin_configSh, map[string]*bintree{}},
					"cleanup.sh":      &bintree{templatesGcloudCloud_runBinCleanupSh, map[string]*bintree{}},
					"remove_pyenv.sh": &bintree{templatesGcloudCloud_runBinRemove_pyenvSh, map[string]*bintree{}},
					"setup_pyenv.sh":  &bintree{templatesGcloudCloud_runBinSetup_pyenvSh, map[string]*bintree{}},
				}},
				"main.py": &bintree{templatesGcloudCloud_runMainPy, map[string]*bintree{}},
				"model": &bintree{nil, map[string]*bintree{
					"predict.py": &bintree{templatesGcloudCloud_runModelPredictPy, map[string]*bintree{}},
				}},
				"requirements-dev.txt": &bintree{templatesGcloudCloud_runRequirementsDevTxt, map[string]*bintree{}},
				"requirements.txt":     &bintree{templatesGcloudCloud_runRequirementsTxt, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
